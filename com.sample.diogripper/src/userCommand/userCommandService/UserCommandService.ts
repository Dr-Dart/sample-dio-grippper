/*
    BSD 3-Clause License
    Copyright (c) 2023, Doosan Robotics Inc.
*/
/*********
 * UserCommandService.ts
 *********
 * - Service for make user command DRL and execute statement.
 *********/
import {
    Context,
    ModuleService,
    IModuleChannel,
    IProgramManager,
    ProgramSaveMode,
    Message,
    IDartFileSystem,
    logger
} from 'dart-api';

//DRL Code.
import drlDataCollection from './mainDRL.drl';

//Database manager
import DatabaseManager from '../../utils/DatabaseManager';
import { GripperUserCommandInfo } from '../../types';

//Sub program class
export class ServiceForTaskEditor extends ModuleService {
    // Read DRL File
    async file_read(path: string) {
        const dartfs = this.moduleContext.getSystemLibrary(Context.DART_FILE_SYSTEM) as IDartFileSystem;
        const drl = await dartfs.readFile(this.moduleContext, path);

        return drl;
    }

    // get db's data and convert it to user command data
    async getCommandData () {
        // 1) initial database
        await DatabaseManager.initDatabase(this.moduleContext);

        // 2) get user command data from db and return it.
        const dataList = await DatabaseManager.getUserCommandData();
        return dataList
    }

    /*********
     * onBind
     *********/
    onBind(message: Message, channel: IModuleChannel): boolean {
        //Set ProgramManager
        const programManager = this.moduleContext.getSystemManager(Context.PROGRAM_MANAGER) as IProgramManager;

        /*********
         *   1. Event "req_to_save_commands_def_as_sub_program"
         *   Define and save Sub Program Function
         *   componentId : Screen component Id. Write in mainfest.json
         *   programName : The program name created by the taskeditor. It will automatically generated by the task editor.
         *********/

        channel.receive('req_to_save_commands_def_as_sub_program', ({ programName }) => {
            // 1-1. Define Sub Program function
            let program = `from DRCF import * \r\n`;

            
            // Get all data in database
            this.getCommandData()
            .then((dataList : GripperUserCommandInfo[][]) => {

                program += `global graspDatabase\r\n`
                program += `graspDatabase = ` + JSON.stringify(dataList[0]) + `\r\n`;

                program += `global releaseDatabase\r\n`
                program += 'releaseDatabase = ' + JSON.stringify(dataList[1]) + `\r\n`;

                //1-2. read DRL File
                this.file_read(drlDataCollection).then((drl) => {
                    program = program + drl;

                    // 1-3. Save Sub Program function
                    programManager.saveSubProgram(ProgramSaveMode.SAVE, programName, program).then((result) => {
                        //Send result of save sub program
                        channel.send('req_to_save_commands_def_as_sub_program', result);
                    }); //subProgram.then
                });
            });
            
        }); //channel.receive(save command)

        /*********
         *   2. Event "gen_command_call"
         *   Define function execute statement and send it to Task Editor
         *   componentId : Screen component Id. Write in mainfest.json
         *   data : Saved data. Received by PiP Screen.
         *********/

        channel.receive('gen_command_call', ({ componentId, data }) => {

            /*************
             *  2-1. Generate execute statement
             *  Update Gripper Value and Make execute statement
             *  ex) result = 'function name(' + 'value1' + 'value2' + ... + 'last value' + ')'
             *  string value : Use JSON.stringify().
             *  boolean value : Use number().
             *  number value: Use as it is.
             *************/ 
            //Execute statement for sub program
            let result = ``; 
            
            // select function name
            if (componentId == 'pip_grasp') {
                result = `grasp(` + data.indexSelected +   `)`;
            } else if (componentId == 'pip_release') {
                result = `release(` + data.indexSelected +   `)`;
            }

            /*************
             *  2-2. Send execute statement
             *************/
            if (data.selectedValue === '') {
                // No return Value
                logger.debug('no return value')
                channel.send('gen_command_call', result);
            }
            else {
                // Return Value Exist
                logger.debug('return value exist')
                let returnValue = '';
                returnValue = data.selectedValue;

                channel.send('gen_command_call', {
                    command: result,
                    variableName: returnValue,
                });
            }
        }); //channel.receive(gen command call)
        return true;
    } //onBind
} //ServiceForTaskEditor
