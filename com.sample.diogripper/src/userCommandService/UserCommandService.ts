/*
    BSD 3-Clause License
    Copyright (c) 2023, Doosan Robotics Inc.
*/
import {
    Context,
    ModuleService,
    IModuleChannel,
    IProgramManager,
    ProgramSaveMode,
    Message,
} from 'dart-api';

//DRL Code.
import {DRL_Sub} from './constDRL'

//Sub program class
export class ServiceForTaskEditor extends ModuleService {
    
    //onBind
    onBind(message: Message, channel: IModuleChannel): boolean {
        console.log(`User command onBind: ${this.moduleContext.componentId}, ${JSON.stringify(message)}`);

        //Set ProgramManager
        const programManager = this.moduleContext.getSystemManager(Context.PROGRAM_MANAGER) as IProgramManager;

        /*********
        *   1. Event "req_to_save_commands_def_as_sub_program"
        *   Define and save Sub Program Function
        *   componentId : Screen component Id. Write in mainfest.json
        *   programName : The program name created by the taskeditor. It will automatically generated by the task editor.
        *********/

        channel.receive( "req_to_save_commands_def_as_sub_program", ({componentId, programName}) => {     
            console.log(`Sub_DRL check, ComponentID = ${componentId}, Program Name = ${programName}  `);

            // 1-1. Define Sub Program function
            let program = `from DRCF import * \r\n`
            program = program + DRL_Sub

            console.log(`Sub_DRL : ${program}`);
    
            // 1-2. Save Sub Program function
            programManager.saveSubProgram(ProgramSaveMode.SAVE, programName, program)
            .then(result => {
                //Send result of save sub program
                channel.send("req_to_save_commands_def_as_sub_program", result);
                console.log(`Save Sub Program Result = ${result}`);
            });//subProgram.then

        });//channel.receive(save command)


        /*********
        *   2. Event "gen_command_call"
        *   Define function execute statement and send it to Task Editor
        *   componentId : Screen component Id. Write in mainfest.json
        *   data : Saved data. Received by PiP Screen.
        *********/
        
        channel.receive("gen_command_call", ( {componentId, data}) => {
            console.log(`gen command call : , ComponentID = ${componentId}, data = ${JSON.stringify(data)}  `);
            //Execute statement for sub program
            let result = ``; //

            /*************
            *  2-1. Generate execute statement
            *  Update Gripper Value and Make execute statement
            *  ex) result = 'function name(' + 'value1' + 'value2' + ... + 'last value' + ')'
            *  string value : Use JSON.stringify().
            *  boolean value : Use number().
            *  number value: Use as it is.
            *************/
            if (componentId == "pip_grasp") {
                result += `grasp(`
            }
            else if(componentId == "pip_release") {
                result += `release(`
            }

            result += JSON.stringify(data.userCommandInfos.signalType) + `,`
            + data.userCommandInfos.port[0] + `,`
            + data.userCommandInfos.port[1] + `,`
            + Number(data.userCommandInfos.signal[0]) + `,`
            + Number(data.userCommandInfos.signal[1]) + `)`

            // 2-2. Send execute statement
            console.log(result);
            channel.send("gen_command_call", result);

        });//channel.receive(gen command call)
        return true;
    }//onBind

}//ServiceForTaskEditor